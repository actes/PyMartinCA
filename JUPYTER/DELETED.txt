


soup time 3600 pop 113742 ratio 2.6 space 1800 1800 3269 3052 rule lifelib b3-q4z5ys234k5j #Quickly settles, but explodes if there is a quadratic replicator
0.05





s='b1e7108'
i=int(s, base=16)
s2=bin(i)
s2



g3r2
b1e7108
s3e7c80

r2b000008s000000		1
r2b000008s03ff00		1

r2b000108s00f500		1
r2b073108s05fc80		1
r2b1e7108s3e7c80		1

r3b0000dead0000s0000beef0000		1
r5b00000000000000000...000001fffffe00000000		1

r5
b0000000000000000001ffe00000000
s0000000000000001fffffe00000000
1fffffe00000000


p.push("HROT M");
            k.push(["Higher-Range Outer-Totalistic Moore", ""]);
            k.push(["Fredkin R2", "R2,C2,S0,2,4,6,8,10,12,14,16,18,20,22,24,B1,3,5,7,9,11,13,15,17,19,21,23"]);
            k.push(["Fredkin R3", "R3,C2,S0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,B1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47"]);
            k.push(["Fredkin R4", "R4,C2,S0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,B1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79"]);
            k.push(["Replicator R2", "R2,C2,S1,3,5,7,9,11,13,15,17,19,21,23,B1,3,5,7,9,11,13,15,17,19,21,23"]);
            k.push(["Replicator R3", "R3,C2,S1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,B1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47"]);
            k.push(["Replicator R4", "R4,C2,S1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,B1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79"]);




333333333333333333333333333333333333333333333333333333333333









    pops = []
    gens = []
    hs=[]
    ws=[]
    ys=[]
    
    currgen = 0

    for _ in range(int(niter/step2)):
        pops.append(p1.population)
        gens.append(currgen)
        
        bb=p1.bounding_box
        h=1
        w=1
        if bb:
            h=bb[2]-bb[0]
            w=bb[3]-bb[1]
        hs.append(h)
        ws.append(w)
        #ys.append(p1.population/h)
        ys.append(p1.population/(1+currgen))
        
        p1 = p1[step2]
        currgen += step2


    #plt.plot(gens, pops)
    #plt.plot(gens, hs)
    ###plt.plot(gens, pops/hs)
    #plt.plot(gens, ys)
    #plt.show()
    

    bb=p1.bounding_box
    #print(bb)
   
    h=1
    w=1
    if bb:
        h=bb[2]-bb[0]
        w=bb[3]-bb[1]


    tag1='soup'
    time_s='time'
    time11=niter
    pop_s='pop'
    population=p1.population
    space_s='space'
    rule_s='rule'
    rulespace='lifelib'

    print(tag1,time_s,time11,pop_s,population,space_s,w2,h2,w,h,rule_s,rulespace,rulestr)


rule lifelib b34s23

B13/S23 [Explosive]
B23/S23 [Explosive]
B34/S23 [Explosive]
B35/S23
B36/S23
B37/S23 [Explosive]
B38/S23








333333333333333333333333333333333333333333333













#from pylab import 

r_(1)

ltable1=[0]*d*d
fail ltable1[9:19]=1
ltable1

ltable1=[0]*d*d
ltable1[9:19]=1
ltable1


listlist1=[ [9,18] ]

x=[]
y=listlist1[0]

#list(range(7,12)+[17]+range(20,23) )
z=range(7,12)
#.+range(20,23) 
z.




listlist1=[ [9,18] ]


y=listlist1[0]

list(range(7,12)+[17]+range(20,23) )
list(range(7,12),[17],range(20,23) )
